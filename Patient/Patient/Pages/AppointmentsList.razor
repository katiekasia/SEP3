@page "/appointments"
@using System.Security.Claims
@using Patient.DTOs
@using Patient.Services
@inject IAppointmentService AppointmentService
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager NavigationManager;
@inject IAppointmentStateService state;

<link href="css/Appointments.css" rel="stylesheet" />

<AuthorizeView>
    <NotAuthorized>
        <h2>Patient Appointments</h2>
        <p>Please log in with your patient credentials.</p>
        <NavLink class="nav-link" href="/">
            <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span>Login
        </NavLink>
    </NotAuthorized>

    <Authorized>
        <div class="container">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }

            @if (appointments?.Any() == true)
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead>
                        <tr>
                            <th>Date</th>
                            <th>Time</th>
                            <th>Type</th>
                            <th>Doctor</th>
                            <th>Specialization</th>
                            <th>Clinic</th>
                            <th>Status</th>
                            <th>Description</th>
                            <th>Actions</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var appointment in appointments.OrderByDescending(a => DateOnly.Parse(a.Date)).ThenBy(a => TimeOnly.Parse(a.Time)))
                        {
                            <tr>
                                <td>@DateOnly.Parse(appointment.Date).ToString("dd/MM/yyyy")</td>
                                <td>@TimeOnly.Parse(appointment.Time).ToString("HH:mm")</td>
                                <td>@appointment.Type</td>
                                <td>Dr. @appointment.DoctorFirstName @appointment.DoctorLastName</td>
                                <td>@appointment.DoctorSpecialization</td>
                                <td>
                                    <div>@appointment.ClinicName</div>
                                    <small class="text-muted">
                                        @appointment.ClinicStreet @appointment.ClinicStreetNumber, @appointment.ClinicCity
                                    </small>
                                </td>
                                <td>
                                        <span class="badge badge-@GetStatusColor(appointment.Status)">
                                            @appointment.Status
                                        </span>
                                </td>
                                <td>@appointment.Description</td>
                                <td>
                                    @if (appointment.Status == "Active")
                                    {
                                        <button class="btn btn-danger"
                                                @onclick="() => CancelAppointment(appointment.Id)">
                                            Cancel
                                        </button>
                                    }
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            }
            else if (!isLoading)
            {
                <div class="alert alert-success">No appointments found.</div>
            }
        </div>
    </Authorized>
</AuthorizeView>

@code {
    private List<GetAppointmentsDto> appointments;
    private string errorMessage;
    private bool isLoading;


    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    private string cprNumber;

    protected override async Task OnInitializedAsync()
    {
        if (state.IsInitialized)
        {
            appointments = state.Appointments;
            return;
        }; // Skip if already initialized

        try
        {
            var authState = await authenticationStateTask;
            var user = authState.User;

            cprNumber = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (!string.IsNullOrWhiteSpace(cprNumber))
            {
                await FetchAppointments();
            }
            else
            {
                errorMessage = "Unable to fetch CPR number. Please log in again.";
            }
            
        }
        catch (Exception)
        {
            errorMessage = "Failed to load appointments.";
        }
    }

    private async Task FetchAppointments()
    {
        if (string.IsNullOrWhiteSpace(cprNumber))
        {
            errorMessage = "CPR number is missing.";
            return;
        }

        try
        {
            isLoading = true;
            errorMessage = null;
            appointments = await AppointmentService.GetAppointments(cprNumber);
            state.SetAppointments(appointments);
        }
        catch (Exception)
        {
            errorMessage = "Failed to load appointments. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetStatusColor(string status) => status?.ToLower() switch
    {
        "active" => "success",
        "cancelled" => "danger",
        "expired" => "warning",
        _ => "secondary"
    };

    private async Task CancelAppointment(int appointmentId)
    {
        try
        {
            var success = await AppointmentService.CancelAppointment(appointmentId, cprNumber);
            if (success)
            {
                await FetchAppointments(); // Refresh the list after cancellation
            }
            else
            {
                errorMessage = "Failed to cancel appointment. Please try again.";
            }
        }
        catch (Exception)
        {
            errorMessage = "Failed to cancel appointment. Please try again.";
        }
    }
}