@page "/Demo"
@using System.Diagnostics
@using System.Linq.Expressions
@using System.Security.Claims
@using PatientFinal.Auth
@using PatientFinal.DTOs
@using PatientFinal.Services
@inject HttpClient Http
@inject IAppointmentService AppointmentService
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthProvider;

<PageTitle>Book Appointment</PageTitle>

<link href="css/Demo.css" rel="stylesheet"/>
<h3>Book an appointment</h3>

<AuthorizeView>
    <NotAuthorized>
        Please log in with your patient credentials
    </NotAuthorized>
    <Authorized>
        @if (!showConfirmation)
        {
            <div id="appointment-form" class="form-container">
                <div class="form-group">
                    <label for="location">Choose a city:</label>
                    <select id="location" class="dropdown" @onchange="HandleLocationChange">
                        <option value="">Select a location</option>
                        @if (cities != null && cities.Any())
                        {
                            @foreach (CityDto city in cities)
                            {
                                <option value="@city.code">@city.name (@city.code)</option>
                            }
                        }
                        else
                        {
                            <p>No cities available.</p>
                        }

                    </select>
                </div>

                <div class="form-group">
                    <label for="clinic">Choose a clinic:</label>
                    <select id="clinic" class="dropdown"  @onchange="HandleClinicChange">
                        <option value="">Select a clinic</option>
                        @foreach (ClinicDto clinic in clinics)
                        {
                            <option value="@clinic.id">@clinic.name @clinic.address</option>
                        }
                    </select>
                </div>

                <div class="form-group">
                    <label for="doctor">Choose a doctor:</label>
                    <select id="doctor" class="dropdown" @onchange="HandleDoctorChange">
                        <option value="">Select a doctor</option>
                        @foreach (var doctor in doctors)
                        {
                            <option value="@doctor.id">@doctor.name @doctor.surname @doctor.specialization</option>
                        }
                    </select>
                </div>

                <div class="form-group">
                    <label for="specialization">Choose a type of visit:</label>
                    <select id="specialization" class="dropdown" @bind="selectedType">
                        <option value="">Select a type of visit</option>
                        @foreach (var type in types)
                        {
                            <option value="@type">@type</option>
                        }
                    </select>
                </div>

                <div class="form-group">
                    <label for="description">Describe your symptoms:</label>
                    <textarea id="description" class="textarea" rows="5" @bind="writtenDescription"></textarea>
                </div>

                <div class="form-group">
                    <label for="date">Select Date:</label>
                    <input type="date" id="date" class="input" @bind="selectedDate" />
                </div>

                <div class="form-group">
                    <label for="time">Select Time:</label>
                    <input type="time" id="time" class="input" step="900" @bind="selectedTime" />
                </div>

                <button class="btn-confirm" @onclick="ConfirmDetails">Confirm Details</button>
            </div>
        }

        @if (showConfirmation)
        {
            <div id="confirmation-review" class="confirmation-container">
                <h4>Review and Confirm Your Appointment</h4>
                <p><strong>City:</strong> @selectedLocation.name</p>
                <p><strong>Clinic:</strong> @selectedClinic.name @selectedClinic.address</p>
                <p><strong>Doctor of your choice:</strong> @selectedDoctor.name @selectedDoctor.surname @selectedDoctor.specialization</p>
                <p><strong>Type of visit:</strong> @selectedType</p>
                <p><strong>Description:</strong> @writtenDescription</p>
                <p><strong>Date:</strong> @selectedDate?.ToString("yyyy-MM-dd")</p>
                <p><strong>Time:</strong> @selectedTime?.ToString(@"hh\:mm")</p>

                <button class="btn-book" @onclick="CreateAppointment">Book</button>
            </div>
        }

        @if (!string.IsNullOrEmpty(serverResponse))
        {
            <div id="server-response" class="response-container">@serverResponse</div>
        }




        @code {
            private List<CityDto> cities = new List<CityDto>();
            private List<ClinicDto> clinics = new List<ClinicDto>();
            private List<DoctorDto> doctors = new List<DoctorDto>();
            private string cpr;

            protected override async Task OnInitializedAsync()
            {
                try
                {
                    var authState = await AuthProvider.GetAuthenticationStateAsync();
                    var user = authState.User;
                    this.cpr = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

                    if (string.IsNullOrEmpty(this.cpr))
                    {
                        serverResponse = "Error: Could not retrieve CPR. Please try logging in again.";
                        return;
                    }

                }
                catch (Exception e)
                {
                    Console.WriteLine("AuthState");
                }

                try
                {
                    cities = await AppointmentService.GetCities();

                }
                catch (Exception e)
                {
                    serverResponse = $"Error fetching cities: {e.Message}";
                    Console.WriteLine("Error: " + e);
                }

                try
                {
                    if(selectedLocation!= null)
                        clinics = await AppointmentService.GetClinicByCity(selectedLocation.code);

                }
                catch (Exception e)
                {
                    Console.WriteLine(e);
                    throw;
                }

                try
                {
                    if(selectedClinic!= null)
                        doctors = await AppointmentService.GetDoctorsByClinic(selectedClinic.id);

                }
                catch (Exception e)
                {
                    Console.WriteLine(e);
                    throw;
                }
            }


            private List<string> types = new() { "Preventive Visit/Check up", "Consultation Visit", "Urgent Care Visit", "Telemedicine Visit" };

            private string? serverResponse;
            private CityDto? selectedLocation;
            private DoctorDto? selectedDoctor;
            private ClinicDto? selectedClinic;
            private string? selectedType;
            private string? writtenDescription;
            private DateTime? selectedDate;
            private TimeOnly? selectedTime;
            private bool showConfirmation = false;
            //
            private async void HandleLocationChange(ChangeEventArgs e)
            {
                string selectedCode = e.Value?.ToString();

                // Match the selected code to the corresponding CityDto
                selectedLocation = cities.FirstOrDefault(city => city.code == selectedCode);

                // Debug or handle null cases if no city matches
                if (selectedLocation == null)
                {
                    Console.WriteLine($"No city found with code: {selectedCode}");
                }
                else
                {
                    Console.WriteLine($"Selected city: , {selectedLocation.name} with:  {selectedLocation.code}");
                    clinics = await AppointmentService.GetClinicByCity(selectedLocation.code);
                    Console.WriteLine(clinics.Count);
                    StateHasChanged();
                }
            }

            private async void HandleClinicChange(ChangeEventArgs e)
            {
                string selectedClinicId = e.Value?.ToString();

                if (!string.IsNullOrEmpty(selectedClinicId))
                {
                    // Update the selected clinic (from the clinic list)
                    selectedClinic = clinics.FirstOrDefault(clinic => clinic.id == selectedClinicId);

                    // Fetch the list of doctors for the selected clinic
                    if (selectedClinic != null)
                    {
                        try
                        {
                            doctors = await AppointmentService.GetDoctorsByClinic(selectedClinic.id);
                            Console.WriteLine($"Doctors found: {doctors.Count}");
                            foreach (var doc in doctors)
                            {
                                Console.WriteLine($"Doctor: {doc.name}, ID: {doc.id}, Specialization: {doc.specialization}");
                            }
                            StateHasChanged();
                        }
                        catch (Exception ex)
                        {
                            Console.WriteLine($"Error fetching doctors: {ex.Message}");
                        }
                    }
                }
            }
            private void HandleDoctorChange(ChangeEventArgs e)
            {
                string selectedDoctorId = e.Value?.ToString();
                selectedDoctor = doctors.FirstOrDefault(d => d.id == selectedDoctorId);
                Console.WriteLine($"Selected doctor: {selectedDoctor?.name} {selectedDoctor?.specialization}");
                StateHasChanged();
            }

            private void ConfirmDetails() => showConfirmation = true;

            private async Task CreateAppointment()
            {
                Console.WriteLine(selectedDate.ToString());
                Console.WriteLine(selectedTime.ToString());
                if (selectedDate == null || selectedTime == null)
                {
                    serverResponse = "Please select a valid date and time.";
                    return;
                }

                Console.WriteLine($"Retrieved CPR from claims: {cpr}");

                if (string.IsNullOrEmpty(cpr))
                {
                    serverResponse = "Unable to retrieve user CPR. Please try logging in again.";
                    return;
                }

                var createAppointmentDto = new CreateAppointmentDto()
                {
                    status = "Active",
                    description = writtenDescription,
                    type = selectedType,
                    doctorId = selectedDoctor.id,
                    patientCpr = cpr,
                    date = selectedDate?.ToString("yyyy-MM-dd"),
                    time = selectedTime?.ToString("HH:mm")
                };

                try
                {
                    var response = await AppointmentService.CreateAppointment(createAppointmentDto);
                    serverResponse = response.response ?? " response";
                    Navigation.NavigateTo("/appointments");
                }
                catch (Exception e)
                {
                    serverResponse = $"Error creating an appointment: {e.Message}";
                    Console.WriteLine($"Full error details: {e}");
                }
            }

        }

    </Authorized>
</AuthorizeView>

