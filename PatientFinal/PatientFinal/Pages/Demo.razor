@page "/Demo"
@using System.Diagnostics
@using PatientFinal.DTOs
@using PatientFinal.Services
@inject HttpClient Http
@inject IAppointmentService AppointmentService

<PageTitle>Book Appointment</PageTitle>
<h3>Book an Appointment</h3>

@if (!showConfirmation)
{
    <div id="appointment-form" class="form-container">
        <div class="form-group">
            <label for="location">Choose a location:</label>
            <select id="location" class="dropdown" @onchange="HandleLocationChange">
                <option value="">Select a location</option>
                @foreach (var location in locations)
                {
                    <option value="@location.Detail">@location.Name</option>
                }
            </select>
        </div>

        <div class="form-group">
            <label for="specialization">Choose a type of visit:</label>
            <select id="specialization" class="dropdown" @onchange="HandleSpecializationChange">
                <option value="">Select a specialization</option>
                @foreach (var type in types)
                {
                    <option value="@type">@type</option>
                }
            </select>
        </div>

        <div class="form-group">
            <label for="description">Describe your symptoms:</label>
            <textarea id="description" class="textarea" rows="5" @bind="writtenDescription"></textarea>
        </div>

        <div class="form-group">
            <label for="date">Select Date:</label>
            <input type="date" id="date" class="input" @bind="selectedDate" />
        </div>

        <div class="form-group">
            <label for="time">Select Time:</label>
            <input type="time" id="time" class="input" step="900" @bind="selectedTime" />
        </div>

        <button class="btn-confirm" @onclick="ConfirmDetails">Confirm Details</button>
    </div>
}

@if (showConfirmation)
{
    <div id="confirmation-review" class="confirmation-container">
        <h4>Review and Confirm Your Appointment</h4>
        <p><strong>Location:</strong> @selectedLocation</p>
        <p><strong>Specialization:</strong> @selectedTypes</p>
        <p><strong>Description:</strong> @writtenDescription</p>
        <p><strong>Date:</strong> @selectedDate?.ToString("yyyy-MM-dd")</p>
        <p><strong>Time:</strong> @selectedTime?.ToString(@"hh\:mm")</p>

        <button class="btn-book" @onclick="CreateAppointment">Book</button>
    </div>
}

@if (!string.IsNullOrEmpty(serverResponse))
{
    <div id="server-response" class="response-container">@serverResponse</div>
}

@code {
    private List<(string Name, string Detail)> locations = new()
    {
        ("Hospital North", "1234 North St, City A"),
        ("Clinic Central", "5678 Central Blvd, City B"),
        ("Health Center South", "91011 South Ave, City C")
    };

    private List<string> types = new() { "Cardiologist", "Gynecologist", "Family Doctor" };

    private string? serverResponse;
    private string? selectedLocation;
    private string? selectedTypes;
    private string? writtenDescription;
    private DateTime? selectedDate;
    private TimeOnly? selectedTime;
    private bool showConfirmation = false;

    private void HandleLocationChange(ChangeEventArgs e) => selectedLocation = e.Value?.ToString();
    private void HandleSpecializationChange(ChangeEventArgs e) => selectedTypes = e.Value?.ToString();
    private void ConfirmDetails() => showConfirmation = true;

    private async Task CreateAppointment()
    {
        Console.WriteLine(selectedDate.ToString());
        Console.WriteLine(selectedTime.ToString());
        if (selectedDate == null || selectedTime == null)
        {
            serverResponse = "Please select a valid date and time.";
            return;
        }

        var createAppointmentDto = new CreateAppointmentDto()
        {
            status = "Active",
            description = writtenDescription,
            type = selectedTypes,
            doctorId = "23333",
            patientCpr = "23333",
            date = selectedDate?.ToString("yyyy-MM-dd"),
            time = selectedTime?.ToString("HH:mm")
        };

        try
        {
            
            var response = await AppointmentService.CreateAppointment(createAppointmentDto);
            serverResponse = response != null
                ? $"Appointment successfully booked in {response} with status '{response.status}'."
                : "Failed to book the appointment.";
        }
        catch (Exception e)
        {
            // System.Diagnostics.StackTrace t = new System.Diagnostics.StackTrace();
            // Console.WriteLine("KK");
            // Debug.WriteLine(Environment.StackTrace);
            serverResponse = $"Error creating an appointment: {e.Message}";
        }
    }
}


<style>
    /* General container for the form */
    #appointment-form {
        margin: 20px auto;
        padding: 20px;
        max-width: 600px;
        border: 1px solid #ccc;
        border-radius: 10px;
        background-color: #f9f9f9;
    }

    /* Grouped form elements */
    .form-group {
        margin-bottom: 15px;
    }

    /* Dropdowns and inputs */
    .dropdown,
    .input {
        width: 100%;
        padding: 8px;
        margin-top: 5px;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 16px;
    }

    /* Textarea styling */
    .textarea {
        width: 100%;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 5px;
        font-size: 16px;
        resize: vertical;
    }

    /* Buttons */
    .btn-confirm,
    .btn-book {
        display: inline-block;
        padding: 10px 20px;
        font-size: 16px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        color: #fff;
    }

    .btn-confirm {
        background-color: #007bff;
    }

    .btn-book {
        background-color: #28a745;
    }

    .btn-confirm:hover,
    .btn-book:hover {
        opacity: 0.9;
    }

    /* Confirmation container */
    #confirmation-review {
        margin: 20px auto;
        padding: 20px;
        max-width: 600px;
        border: 1px solid #ccc;
        border-radius: 10px;
        background-color: #e9ecef;
    }

    /* Server response styling */
    .response-container {
        margin: 20px auto;
        padding: 10px;
        max-width: 600px;
        border: 1px solid #007bff;
        background-color: #d1ecf1;
        color: #0c5460;
        border-radius: 5px;
    }

</style>