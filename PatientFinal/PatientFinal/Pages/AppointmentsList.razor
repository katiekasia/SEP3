@page "/appointments"
@using System.Security.Claims
@using PatientFinal.DTOs
@using PatientFinal.Services
@inject IAppointmentService AppointmentService
@inject AuthenticationStateProvider AuthProvider; 

<AuthorizeView>
    <NotAuthorized>
        <h2 class="mb-4">Patient Appointments</h2>
        <p>Please log in with your patient credentials</p>
    </NotAuthorized>

    <Authorized>
        <div class="container mt-4">
            

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }

            @if (appointments?.Any() == true)
            {
                <div class="card mt-4">
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead class="table-light">
                                <tr>
                                    <th>Date</th>
                                    <th>Time</th>
                                    <th>Type</th>
                                    <th>Doctor</th>
                                    <th>Specialization</th>
                                    <th>Clinic</th>
                                    <th>Status</th>
                                    <th>Description</th>
                                    <th>Actions</th>
                                </tr>
                                </thead>
                                <tbody>
                                @foreach (var appointment in appointments.OrderByDescending(a => DateOnly.Parse(a.Date)).ThenBy(a => TimeOnly.Parse(a.Time)))
                                {
                                    <tr>
                                        <td>@DateOnly.Parse(appointment.Date).ToString("dd/MM/yyyy")</td>
                                        <td>@TimeOnly.Parse(appointment.Time).ToString("HH:mm")</td>
                                        <td>@appointment.Type</td>
                                        <td>Dr. @appointment.DoctorFirstName @appointment.DoctorLastName</td>
                                        <td>@appointment.DoctorSpecialization</td>
                                        <td>
                                            <div>@appointment.ClinicName</div>
                                            <small class="text-muted">
                                                @appointment.ClinicStreet @appointment.ClinicStreetNumber, @appointment.ClinicCity
                                            </small>
                                        </td>
                                        <td>
                                            <span class="badge bg-@GetStatusColor(appointment.Status)">
                                                @appointment.Status
                                            </span>
                                        </td>
                                        <td>@appointment.Description</td>
                                        <td>
                                            @if (appointment.Status == "Active")
                                            {
                                                <button class="btn btn-danger btn-sm"
                                                        @onclick="() => CancelAppointment(appointment.Id)">
                                                    Cancel
                                                </button>
                                            }
                                        </td>
                                    </tr>
                                }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            }
            else if (!isLoading)
            {
                <p>No appointments found.</p>
            }
        </div>
    </Authorized>
</AuthorizeView>

@code {
    private List<GetAppointmentsDto> appointments;
    private string errorMessage;
    private bool isLoading;

    [CascadingParameter] private Task<AuthenticationState> authenticationStateTask { get; set; }
    private string cprNumber;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await authenticationStateTask;
            var user = authState.User;

            cprNumber = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (!string.IsNullOrWhiteSpace(cprNumber))
            {
                await FetchAppointments(); // Automatically fetch appointments
            }
            else
            {
                errorMessage = "Unable to fetch CPR number. Please log in again.";
            }
        }
        catch (Exception e)
        {
            errorMessage = $"Failed to load appointments: {e.Message}";
        }
    }

    private async Task FetchAppointments()
    {
        if (string.IsNullOrWhiteSpace(cprNumber))
        {
            errorMessage = "CPR number is missing.";
            return;
        }

        try
        {
            isLoading = true;
            errorMessage = null;
            appointments = await AppointmentService.GetAppointments(cprNumber);
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to load appointments. Please try again.";
            Console.WriteLine($"Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetStatusColor(string status) => status?.ToLower() switch
    {
        "active" => "success",
        "cancelled" => "danger",
        "expired" => "warning",
        _ => "secondary"
    };

    private async Task CancelAppointment(int appointmentId)
    {
        try
        {
            var success = await AppointmentService.CancelAppointment(appointmentId, cprNumber);
            if (success)
            {
                await FetchAppointments(); // Refresh the list after cancellation
            }
            else
            {
                errorMessage = "Failed to cancel appointment. Please try again.";
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to cancel appointment. Please try again.";
            Console.WriteLine($"Error: {ex.Message}");
        }
    }
}
