@page "/Profile"
@using System.Security.Claims
@using Doctor.DTOs
@using Doctor.Services
@inject HttpClient Http;
@inject ILoginService LoginService;
@inject AuthenticationStateProvider AuthProvider;
<h3>Profile Overview</h3>

<AuthorizeView>
    <NotAuthorized>
        You need to login first
    </NotAuthorized>
    
    <Authorized>
        <p>ID: @id</p>
        <p>First name: @firstName</p>
        <p>Last name: @lastName</p>
        <p>Specialisation: @specialisation</p>

        <input @bind="@currentPassword">
        <input @bind="@newPassword">
        <button @onclick="ChangePassword">Change password</button>

        @if (!string.IsNullOrEmpty(responseMessage))
        {
        <p>Server Response: @responseMessage</p>
        }
    </Authorized>
</AuthorizeView>

@code {
    private string id;
    private string firstName;
    private string lastName;
    private string specialisation;
    private string newPassword;
    private string currentPassword;
    private string responseMessage;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            id = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            if (!string.IsNullOrEmpty(id))
            {
                var doctor = await LoginService.getDoctorById(id);
                if (doctor != null)
                {
                    firstName = doctor.FirstName;
                    lastName = doctor.LastName;
                    specialisation = doctor.Specialisation;
                }
            }
        }
        catch (Exception e)
        {
            responseMessage = $"Failed: {e.Message}";
        }
    }

    private async Task ChangePassword()
    {
        if (string.IsNullOrEmpty(currentPassword) || string.IsNullOrEmpty(newPassword))
        {
            responseMessage = "Fields cannot be emtpy";
            return;
        }

        try
        {
            var changePasswordDto = new ResetPasswordDto()
            {
                id = id,
                currentPassword = currentPassword,
                newPassword = newPassword
            };

            var response = await LoginService
                .ResetPasswordServiceMethod(changePasswordDto);
        }
        catch (Exception e)
        {
            responseMessage = $"Changing password failed: {e.Message}";
        }
    }
}