@page "/Profile"
@using System.Security.Claims
@using Doctor.DTOs
@using Doctor.Services
@inject HttpClient Http;
@inject ILoginService LoginService;
@inject AuthenticationStateProvider AuthProvider;

<h3>Profile Overview</h3>

<link href="css/profile.css" rel="stylesheet" />

<div class="profile-wrapper">
    <div class="profile-box">
        <AuthorizeView>
            <NotAuthorized>
                <p class="error-message">You need to login first.</p>
                <NavLink class="nav-link" href="/">
                    <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Login
                </NavLink>
            </NotAuthorized>

            <Authorized>
                <h3>Doctor Profile</h3>
                <div class="profile-details">
                    <p>Id: @id</p>
                    <p>First Name: @firstName</p>
                    <p>Last Name: @lastName</p>
                    <p>Specialisation: @specialisation</p>
                </div>

                <div class="password-container">
                    <input @bind="@newPassword" type="password" placeholder="Enter new password" class="input-field" />
                    <button @onclick="ChangePassword" class="profile-btn">Change Password</button>
                </div>

                @if (!string.IsNullOrEmpty(responseMessage))
                {
                <p class="response-message">@responseMessage</p>
                }
            </Authorized>
        </AuthorizeView>
    </div>
</div>


@code {
    private string id;
    private string firstName;
    private string lastName;
    private string specialisation;
    private string newPassword;
    private string responseMessage;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            id = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;

            
            if (!string.IsNullOrEmpty(id))
            {
                var doctor = await LoginService.getDoctorById(id);
                if (doctor != null)
                {
                    
                    firstName = doctor.Name;
                    lastName = doctor.Surname;
                    specialisation = doctor.Specialisation;
                }
            }
        }
        catch (Exception e)
        {
            responseMessage = $"Failed: {e.Message}";
        }
    }

    private async Task ChangePassword()
    {
        if (string.IsNullOrWhiteSpace(newPassword))
        {
            responseMessage = "Field cannot be empty";
            return;
        }
        if (newPassword.Length<5)
        {
            responseMessage = "Field cannot contain less than 5 characters";
            return;
        }

        try
        {
            var changePasswordDto = new ResetPasswordDto()
            {
                id = id,
                newPassword = newPassword
            };

            var response = await LoginService
                .ResetPasswordServiceMethod(changePasswordDto);
            responseMessage = "Password changed successfully";

        }
        catch (HttpRequestException httpEx)
        {
            // Check for HTTP status code
            if (httpEx.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                responseMessage = "Action failed: User not found. Please try loggin in again.";
            }
            else if (httpEx.StatusCode == System.Net.HttpStatusCode.InternalServerError)
            {
                responseMessage = "Action failed: Server error. Please try again later.";
            }
            else
            {
                responseMessage = "Action failed: An unexpected error occurred.";
            }
        }
        catch (Exception e)
        {
            // Catch any other general exceptions
            responseMessage = "Action failed: An error occurred.";
        }
    }
}