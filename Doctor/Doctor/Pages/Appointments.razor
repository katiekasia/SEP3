@page "/Appointments"
@using Doctor.Services
@using PatientFinal.DTOs
@inject IAppointmentService AppointmentService;
@using System.Security.Claims
@using Doctor.DTOs
@inject NavigationManager NavigationManager


<h3>Appointments</h3>
<AuthorizeView>
    <NotAuthorized>
        You need to login first
    </NotAuthorized>

    <Authorized>
<div class="navigation">
    <button @onclick="PreviousWeek">Previous Week</button>
    <button @onclick="NextWeek">Next Week</button>
</div>

<table class="schedule-table">
    <thead>
        <tr>
            <th>Hour</th>
            @foreach (var day in GetWeekDates())
            {
                <th>@($"{day:dddd}, {day:MMMM d}")</th> <!-- Show day name and date -->
            }
        </tr>
    </thead>
    <tbody>
        @foreach (var hour in Hours)
        {
            <tr>
                <td>@hour:00</td>
                @foreach (var day in GetWeekDates())
                {
                    <td>
                        @* Check if there's an event for this day and hour *@
                        @foreach (var ap in AppointmentsList.Where(a => a.Date == day.Date && a.Time.Hour == hour))
                        {
                            <div class="appointment" @onclick="() => NavigateToDetails(ap.Id)">
                                <strong>@ap.status</strong><br />
                                <span>@ap.type</span>
                                <span>@ap.Id</span>
                                <span>@ap.Time</span>
                            </div>
                        }
                    </td>
                }
            </tr>
        }
    </tbody>
</table>
</Authorized>
</AuthorizeView>
@code {
    
    private void NavigateToDetails(int appointmentId)
    {
        Console.WriteLine(appointmentId);
        NavigationManager.NavigateTo($"/AppointmentDetails/{appointmentId}");
    }
    
    
    [CascadingParameter] public Task<AuthenticationState> State { get; set; }
    
    private List<AppointmentDisplay> AppointmentsList { get; set; } = new List<AppointmentDisplay>();

    private string doctorId;
    

    // Days of the week (Mon to Fri)
    private readonly string[] DaysOfWeek = new string[] { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday" };

    // Hours for Y-axis ( 8 AM to 5 PM)
    private readonly int[] Hours = new int[] { 8, 9, 10, 11, 12, 13, 14, 15, 16, 17 };
    // Track the current week's start date (Monday)
    private DateTime CurrentStartOfWeek = DateTime.Today.AddDays(-(int)DateTime.Today.DayOfWeek + (int)DayOfWeek.Monday);

    // Get the current week's start date
    private DateTime StartOfWeek => CurrentStartOfWeek;

    // Calculate the dates for Monday to Friday
    private List<DateTime> GetWeekDates()
    {
        return DaysOfWeek
            .Select((day, index) => StartOfWeek.AddDays(index))
            .ToList();
    }

    // Navigate to the previous week
    private void PreviousWeek()
    {
        CurrentStartOfWeek = CurrentStartOfWeek.AddDays(-7);
    }

    // Navigate to the next week
    private void NextWeek()
    {
        CurrentStartOfWeek = CurrentStartOfWeek.AddDays(7);
    }

    // Initialisation
    protected override async Task OnInitializedAsync() // Change to async Task instead of async void
    {
        try
        {
            // Ensure AuthenticationState is ready before accessing doctorId
            AuthenticationState authenticationState = await State;
            ClaimsPrincipal claimsPrincipal = authenticationState.User;

            if (claimsPrincipal.Identity is null || !claimsPrincipal.Identity.IsAuthenticated)
            {
                // If not authenticated, return early (handle unauthenticated state if needed)
                return;
            }

            // Retrieve the doctorId from claims
            IEnumerable<Claim> claims = claimsPrincipal.Claims;
            doctorId = claims.SingleOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

            if (string.IsNullOrEmpty(doctorId))
            {
                Console.WriteLine("Doctor ID is missing in the claims.");
                return;
            }

            Console.WriteLine($"Doctor ID: {doctorId}");

            // Now call GetAppointments with the correct doctorId
            AppointmentsList = await AppointmentService.GetAppointments(doctorId);
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error: {e}");
        }
    }

    private async Task updateAppointmentsList()
    {
        try
        {
            AppointmentsList = await AppointmentService.GetAppointments(doctorId);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
    

}

@* Styles for the schedule table *@
<style>
    .navigation {
        margin-bottom: 10px;
        text-align: center;
    }

    .navigation button {
        margin: 5px;
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
    }

    .schedule-table {
        width: 100%;
        border-collapse: collapse;
    }

    .schedule-table th, .schedule-table td {
        padding: 8px;
        border: 1px solid #ddd;
        text-align: center;
    }

    .schedule-table th {
        background-color: #f2f2f2;
    }

    .appointment {
        padding: 4px;
        background-color: #e0e0e0;
        border-radius: 4px;
        margin-bottom: 4px;
    }
</style>