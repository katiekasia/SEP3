@page "/Prescriptions"
@using System.Security.Claims
@using PatientFinal.DTOs
@using PatientFinal.Services
@inject AuthenticationStateProvider AuthProvider;
@inject IPrescriptionGetService PrescriptionGetService;

<h3>Prescriptions</h3>
<PageTitle>Prescriptions</PageTitle>

<AuthorizeView>
    <NotAuthorized>
        <p>Please log in to see your prescriptions</p>
        <NavLink class="nav-link" href="/">
            <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Login
        </NavLink>
    </NotAuthorized>
    <Authorized>
        <div class="prescription-container">
            <h3>Search for prescriptions</h3>

            <div>
                <label for="cpr-input">Enter patient's CPR number:</label>
                <input type="text" id="cpr-input" @bind="insertedcpr" placeholder="Enter CPR number"/>
                <button @onclick="LoadPrescriptionsAsync" disabled="@(isCooldownActive)">Load Prescriptions</button>
            </div>

            @if (loading)
            {
                <p>Loading prescriptions...</p>
            }
            else if (pagedPrescriptions == null || !pagedPrescriptions.Any())
            {
                <p>No prescriptions found</p>
            }
            else
            {
                @foreach (var prescription in pagedPrescriptions)
                {
                    <div class="prescription-card">
                        <h4>Diagnosis: @prescription.diagnosis</h4>
                        <p>
                            <strong>Medication:</strong> @prescription.medication
                        </p>
                        <p>
                            <strong>Recommendations:</strong> @prescription.recommendations
                        </p>
                        <p>
                            <strong>Date:</strong> @prescription.date
                        </p>
                        <p>
                            <strong>Time:</strong> @prescription.time
                        </p>
                        <p>
                            <strong>Doctor:</strong>@prescription.doctorname @prescription.doctorsurname
                        </p>
                    </div>
                }

                <!-- Pagination Controls -->
                <div class="pagination-controls">
                    <button @onclick="GoToPreviousPage" disabled="@(!CanGoToPreviousPage || isCooldownActive)">Previous</button>
                    <button @onclick="GoToNextPage" disabled="@(!CanGoToNextPage || isCooldownActive)">Next</button>
                </div>
            }
        </div>
    </Authorized>
</AuthorizeView>

@code {
    private List<GetPrescriptionsDto> pagedPrescriptions;
    private bool loading = true;
    private string errorMessage;
    private string insertedcpr;

// Pagination variables
    private int prescriptionCount;
    private int currentPage = 1;
    private int pageSize = 10; // Show 5 prescriptions per page
    private bool isCooldownActive = false; // To track if cooldown is active

// To check authentication state
    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        insertedcpr = user?.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        if (string.IsNullOrEmpty(insertedcpr))
        {
            errorMessage = "Couldn't retrieve CPR. Please ensure you're logged in.";
        }

        loading = false;
    }
    
    private async Task LoadPrescriptionsAsync()
    {
        loading = true;
        try
        {
            prescriptionCount = await PrescriptionGetService.GetPrescriptionCount(insertedcpr);
            pagedPrescriptions = await PrescriptionGetService.GetPrescriptionsByPatientCpr(insertedcpr, currentPage);
        }
        catch (Exception e)
        {
            errorMessage = "An error occurred while loading prescriptions.";

        }
        finally
        {
            
            loading = false;
        }
    }

// Pagination helper properties
    private bool CanGoToPreviousPage => currentPage > 1;
    private bool CanGoToNextPage => currentPage * pageSize < prescriptionCount;


    private async Task GoToPreviousPage()
    {
        if (CanGoToPreviousPage && !isCooldownActive)
        {

            loading = true;
            isCooldownActive = true;

            currentPage--;
            await LoadPrescriptionsAsync();
            
            
            await Task.Delay(4000);
            loading = false;
            StateHasChanged();

            isCooldownActive = false;
        }
    }

    private async Task GoToNextPage()
    {
        if (CanGoToNextPage && !isCooldownActive)
        {
            loading = true;
            isCooldownActive = true;

            currentPage++;
            await LoadPrescriptionsAsync();


            await Task.Delay(4000);
            loading = false;
            StateHasChanged();


            isCooldownActive = false;
        }
    }

}


<style>
    .prescription-container {
        padding: 20px;
        background-color: #f4f8ff; /* Soft light blue background */
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        margin: 20px;
    }

    .prescription-container h3 {
        color: #004085; /* Dark blue for title */
        font-size: 24px;
        margin-bottom: 20px;
    }

    /* Prescription Card Styling */
    .prescription-card {
        background-color: #ffffff;
        padding: 15px;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 15px;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .prescription-card:hover {
        transform: translateY(-5px); /* Slight hover effect */
        box-shadow: 0 6px 15px rgba(0, 0, 0, 0.15); /* Enhanced shadow on hover */
    }

    /* Title and Label Styling within Prescription Cards */
    .prescription-card h4 {
        color: #0062cc; /* Blue color for diagnosis */
        font-size: 18px;
        margin-bottom: 10px;
    }

    .prescription-card p {
        font-size: 14px;
        line-height: 1.6;
        color: #555555; /* Dark gray text */
    }

    .prescription-card strong {
        color: #004085; /* Dark blue for labels */
    }

    /* Loading and No Prescriptions Messages */
    p {
        font-size: 16px;
        color: #555555;
    }

    /* Error or No Data Styling */
    p.no-prescriptions {
        color: #ff6b6b; /* Red for error message */
        font-size: 18px;
        font-weight: bold;
    }

    p.loading {
        color: #007bff; /* Blue for loading text */
        font-size: 16px;
    }
</style>