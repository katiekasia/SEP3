@page "/AppointmentDetails/{appointmentId:int}"
@using Doctor.DTOs
@using Doctor.Services
@inject IAppointmentService AppointmentService
@inject NavigationManager NavigationManager
@using System.Security.Claims
@using PatientFinal.DTOs

<link href="css/appointmentDetails.css" rel="stylesheet" />

<h3>Appointment Details</h3>

<AuthorizeView>
    <NotAuthorized>
        You need to login first
        <NavLink class="nav-link" href="/">
            <span class="bi bi-house-door-fill-nav-menu" aria-hidden="true"></span> Login
        </NavLink>
    </NotAuthorized>

    <Authorized>
        @if (appointment != null)
        {
            <div>
                <p><strong>Status:</strong> @appointment.Status</p>
                <p><strong>Type:</strong> @appointment.Type</p>
                <p><strong>Description:</strong>@appointment.Description</p>
                <p><strong>Date:</strong> @appointment.Date.ToString()</p>
                <p><strong>Time:</strong> @appointment.Time.ToString()</p>
                <div></div>
                <p><strong>Patient info:</strong></p>
                <br/>
                <p><strong>CPR: </strong>@appointment.patientCpr</p>
                <p><strong>First name: </strong>@appointment.patientFirstName</p>
                <p><strong>Surname: </strong>@appointment.patientLastName</p>
                <p><strong>Email: </strong>@appointment.patientEmail</p>
                <p><strong>Phone: </strong>@appointment.patientPhone</p>

                <br/>
                <button class="btn btn-danger" @onclick="CancelAppointment">Cancel Appointment</button>
                @if (!string.IsNullOrEmpty(serverResponse))
                {
                <div class="notification success">
                    <p>@serverResponse</p>
                </div>
                }
            </div>
        }
        else
        {
            <p>Loading appointment details...</p>
        }
    </Authorized>
</AuthorizeView>

@code {
    [Parameter] public int AppointmentId { get; set; }
    private GetAppointmentsDto appointment;
    private string doctorId;
    private string serverResponse;

    [CascadingParameter] public Task<AuthenticationState> State { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authenticationState = await State;
            var claimsPrincipal = authenticationState.User;

            if (claimsPrincipal.Identity == null || !claimsPrincipal.Identity.IsAuthenticated)
            {
                return;
            }

            doctorId = claimsPrincipal.FindFirst(ClaimTypes.NameIdentifier)?.Value; // Make sure to use your custom claim type, if different from "doctorId"

            if (string.IsNullOrEmpty(doctorId))
            {
                serverResponse ="Doctor ID not found in claims.";
                return;
            }

            appointment = await AppointmentService.GetAppointmentsDetails(AppointmentId.ToString());

            if (appointment == null)
            {
                serverResponse =$"No appointment found with ID: {AppointmentId}";
            }
        }
        catch (Exception e)
        {
            serverResponse ="Error loading appointment details";
        }
    }

    private async void CancelAppointment()
    {
        var cancelAppointment = await AppointmentService.cancelAppointment(AppointmentId);
        serverResponse = cancelAppointment.response;
        NavigationManager.NavigateTo("/Appointments");
    }

}
